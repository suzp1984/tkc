import os
import copy
import platform

BIN_DIR=os.environ['BIN_DIR'];
LIB_DIR=os.environ['LIB_DIR'];
TOOLS_NAME = os.environ['TOOLS_NAME'] 

env=DefaultEnvironment().Clone()

if env['PLATFORM'] == 'win32' and os.environ['TOOLS_NAME'] != '':
  import subprocess
  class ourSpawn:
    def ourspawn(self, sh, escape, cmd, args, env):
      newargs = ' '.join(args[1:])
      cmdline = cmd + " " + newargs
      startupinfo = subprocess.STARTUPINFO()
      startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
      proc = subprocess.Popen(cmdline, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
          stderr=subprocess.PIPE, startupinfo=startupinfo, shell = False, env = env)
      data, err = proc.communicate()
      rv = proc.wait()
      if rv:
        print("=====")
        print(err)
        print("=====")
      return rv
        
  buf = ourSpawn()
  buf.ourenv = env
  env['SPAWN'] = buf.ourspawn
  
TK_SOURCES=Glob('tkc/*.c') + Glob('platforms/pc/*.c')
env.Library(os.path.join(LIB_DIR, 'tkc_core'), TK_SOURCES, LIBS=[])

TKC_DEPS_LIBS=[]
OS_NAME = platform.system()
TKC_LINKFLAGS = env['LINKFLAGS'];
TKC_STATIC_LIBS = ['conf_io', 'hal', 'csv', 'ubjson', 'streams', 'tkc_core', 'compressors', 'mbedtls', 'miniz']
TKC_LINK_ALL=' -Wl,--whole-archive -lstreams -lconf_io -lhal -lcsv -lubjson -ltkc_core -lcompressors -lmbedtls -lminiz -Wl,--no-whole-archive'

if OS_NAME == 'Windows':
  if TOOLS_NAME == '' :
    TKC_DEPS_LIBS= TKC_STATIC_LIBS + ['SDL2', 'user32','winmm.lib','advapi32.lib','shell32.lib', 'ole32.lib']
    TKC_LINKFLAGS += ' /DEF:"dllexports/tkc.def" '
  elif TOOLS_NAME == 'mingw':
    TKC_DEPS_LIBS= TKC_STATIC_LIBS + ['SDL2', 'user32','winmm','advapi32','shell32', 'ole32', 'ws2_32','Gdi32','Imm32', 'Version', 'OleAut32', 'UUID']
    TKC_LINKFLAGS += TKC_LINK_ALL
elif OS_NAME == 'Darwin':
  TKC_DEPS_LIBS= TKC_STATIC_LIBS
  TKC_LINKFLAGS +=' -all_load '
elif OS_NAME == 'Linux':
  TKC_LINKFLAGS += TKC_LINK_ALL

env.SharedLibrary(os.path.join(BIN_DIR, 'tkc'), [], LIBS=TKC_DEPS_LIBS, LINKFLAGS=TKC_LINKFLAGS); 


